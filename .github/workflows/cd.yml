name: CD - Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Determine deployment environment
  setup:
    name: Setup Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=main-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

  # Build and Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: setup
    environment: ${{ needs.setup.outputs.environment }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Vercel
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          production: ${{ needs.setup.outputs.environment == 'production' }}

  # Deploy to Netlify (Alternative)
  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: setup
    if: false # Disabled by default, enable if using Netlify
    environment: ${{ needs.setup.outputs.environment }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Netlify
        uses: netlify/actions/cli@master
        with:
          args: deploy --prod --dir=dist
        env:
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

  # Build and Push Docker Image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: setup
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/radiant-ui
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Post-deployment health check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [setup, deploy-vercel]
    if: always() && needs.deploy-vercel.result == 'success'

    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          # Add your deployment URL here
          URL="${{ secrets.DEPLOYMENT_URL }}"
          if [ -z "$URL" ]; then
            echo "‚ö†Ô∏è  DEPLOYMENT_URL secret not set, skipping health check"
            exit 0
          fi

          echo "üîç Checking deployment health at: $URL"

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")

          if [ "$STATUS" = "200" ]; then
            echo "‚úÖ Health check passed - Status: $STATUS"
          else
            echo "‚ùå Health check failed - Status: $STATUS"
            exit 1
          fi

  # Create GitHub Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [setup, deploy-vercel]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        run: |
          # Get the tag name
          TAG_NAME=${GITHUB_REF#refs/tags/}

          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # Generate changelog
          if [ -n "$PREV_TAG" ]; then
            echo "## Changes since $PREV_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Initial Release" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
          fi

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ needs.setup.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false

  # Notify deployment status
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [setup, deploy-vercel, health-check]
    if: always()

    steps:
      - name: Deployment notification
        run: |
          if [[ "${{ needs.deploy-vercel.result }}" == "success" && "${{ needs.health-check.result }}" == "success" ]]; then
            echo "üéâ Deployment to ${{ needs.setup.outputs.environment }} successful!"
            echo "Version: ${{ needs.setup.outputs.version }}"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

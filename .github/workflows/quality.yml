name: Quality & Performance

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly quality checks on Sundays at 10 AM UTC
    - cron: '0 10 * * 0'

concurrency:
  group: quality-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code quality metrics
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for SonarCloud

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: SonarCloud Scan
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: CodeClimate Coverage
        if: env.CC_TEST_REPORTER_ID != ''
        uses: paambaati/codeclimate-action@v5.0.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageLocations: ${{ github.workspace }}/coverage/lcov.info:lcov

  # Bundle size analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: |
          # Install bundle analyzer
          npm install --no-save webpack-bundle-analyzer

          # Generate bundle report
          echo "üì¶ Bundle Size Analysis"
          echo "======================"

          # Get build stats
          BUILD_SIZE=$(du -sh dist/ | cut -f1)
          echo "Total build size: $BUILD_SIZE"

          # Analyze main chunks
          echo ""
          echo "Main chunks:"
          ls -lh dist/assets/*.js | awk '{print $9 ": " $5}' | sort -k2 -hr

      - name: Bundle size check
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          package_manager: npm
          script: npm run build

  # Performance testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Serve application
        run: |
          npm run preview &
          sleep 10 # Wait for server to start

      - name: Run Lighthouse CI
        run: |
          npm install --no-save @lhci/cli

          # Create Lighthouse CI config
          cat > lighthouserc.js << EOF
          module.exports = {
            ci: {
              collect: {
                url: ['http://localhost:4173'],
                startServerCommand: 'npm run preview',
                numberOfRuns: 3,
              },
              assert: {
                assertions: {
                  'categories:performance': ['error', {minScore: 0.8}],
                  'categories:accessibility': ['error', {minScore: 0.9}],
                  'categories:best-practices': ['error', {minScore: 0.9}],
                  'categories:seo': ['error', {minScore: 0.8}],
                },
              },
              upload: {
                target: 'temporary-public-storage',
              },
            },
          };
          EOF

          # Run Lighthouse CI
          npx lhci autorun

      - name: Performance regression check
        run: |
          echo "üöÄ Performance Metrics Summary"
          echo "=============================="

          # Basic performance checks using Playwright
          npx playwright test --config=playwright.perf.config.ts || echo "No performance test config found"

  # Accessibility testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: |
          # Install axe-core
          npm install --no-save @axe-core/playwright

          # Create accessibility test
          cat > accessibility.test.js << 'EOF'
          const { test, expect } = require('@playwright/test');
          const AxeBuilder = require('@axe-core/playwright').default;

          test.describe('Accessibility Tests', () => {
            test('should not have any automatically detectable accessibility issues', async ({ page }) => {
              await page.goto('http://localhost:4173');
              await page.waitForLoadState('networkidle');
              
              const accessibilityScanResults = await new AxeBuilder({ page }).analyze();
              
              expect(accessibilityScanResults.violations).toEqual([]);
            });
            
            test('should be keyboard navigable', async ({ page }) => {
              await page.goto('http://localhost:4173');
              
              // Test tab navigation
              await page.keyboard.press('Tab');
              await page.keyboard.press('Tab');
              await page.keyboard.press('Tab');
              
              // Check if focus is visible
              const focusedElement = await page.evaluate(() => document.activeElement.tagName);
              expect(focusedElement).toBeTruthy();
            });
          });
          EOF

          # Run accessibility tests
          npm run preview &
          sleep 10
          npx playwright test accessibility.test.js

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk security scan
        if: env.SNYK_TOKEN != ''
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Parse results
          CRITICAL=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')

          echo "üîí Security Audit Results"
          echo "========================"
          echo "Critical vulnerabilities: $CRITICAL"
          echo "High vulnerabilities: $HIGH"

          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "‚ùå Security vulnerabilities found!"
            cat audit-results.json | jq -r '.advisories | to_entries[] | "- \(.value.title) (\(.value.severity))"'
            exit 1
          else
            echo "‚úÖ No high or critical vulnerabilities found"
          fi

  # Quality summary
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [code-quality, bundle-analysis, performance, accessibility, security-scan]
    if: always()

    steps:
      - name: Quality report
        run: |
          echo "üìä Quality & Performance Summary"
          echo "================================"

          # Check job results
          JOBS=("code-quality" "bundle-analysis" "performance" "accessibility" "security-scan")
          RESULTS=("${{ needs.code-quality.result }}" "${{ needs.bundle-analysis.result }}" "${{ needs.performance.result }}" "${{ needs.accessibility.result }}" "${{ needs.security-scan.result }}")

          PASSED=0
          FAILED=0

          for i in ${!JOBS[@]}; do
            JOB=${JOBS[$i]}
            RESULT=${RESULTS[$i]}
            
            if [ "$RESULT" == "success" ]; then
              echo "‚úÖ $JOB: PASSED"
              ((PASSED++))
            else
              echo "‚ùå $JOB: FAILED"
              ((FAILED++))
            fi
          done

          echo ""
          echo "Summary: $PASSED passed, $FAILED failed"

          if [ $FAILED -gt 0 ]; then
            echo "‚ùå Quality checks failed"
            exit 1
          else
            echo "‚úÖ All quality checks passed"
          fi
